{
  "address": "0x3d42a8FF39752Bd7f02E86B034f3135C4f0b8C24",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newManager",
          "type": "address"
        }
      ],
      "name": "ManagementTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "excludeFromReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "fees",
      "outputs": [
        {
          "internalType": "enum Tokenomics.FeeType",
          "name": "name",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUnlockTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "includeInAntiDumping",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "includeInReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isExcludedFromFee",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isExcludedFromReward",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInPresale",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isIncludedInAntiDumping",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "lock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "deductTransferFee",
          "type": "bool"
        }
      ],
      "name": "reflectionFromToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setExcludedFromFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setIsUnlimitedSenderOrRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setPresaleableEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newManager",
          "type": "address"
        }
      ],
      "name": "transferManagement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x183c856aef9219f86df9d3146dcf51345d29dc92926ce518b24e8490f24d1b95",
  "receipt": {
    "to": null,
    "from": "0x6155711b7a66B1473C9eFeF10150340E69ea48de",
    "contractAddress": "0x3d42a8FF39752Bd7f02E86B034f3135C4f0b8C24",
    "transactionIndex": 0,
    "gasUsed": "5305210",
    "logsBloom": "0x000000000000002002000000000000000000000000000000008000000000000000000000000000000000000000000000000000000400000000001000000000000000000000000000000000080000000000010000000000000000000000000000000000000200000000400000000008000000000000000000000000100000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000200000000000000000000000000000000a0000100000000000000000000000000000000000000000000000080000000000000",
    "blockHash": "0x91dedcd9da5a9671a752a33f5661cb2af04288518e748a7cd65b063b4f7847c4",
    "transactionHash": "0x183c856aef9219f86df9d3146dcf51345d29dc92926ce518b24e8490f24d1b95",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 14674960,
        "transactionHash": "0x183c856aef9219f86df9d3146dcf51345d29dc92926ce518b24e8490f24d1b95",
        "address": "0x3d42a8FF39752Bd7f02E86B034f3135C4f0b8C24",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006155711b7a66b1473c9efef10150340e69ea48de"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x91dedcd9da5a9671a752a33f5661cb2af04288518e748a7cd65b063b4f7847c4"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 14674960,
        "transactionHash": "0x183c856aef9219f86df9d3146dcf51345d29dc92926ce518b24e8490f24d1b95",
        "address": "0x3d42a8FF39752Bd7f02E86B034f3135C4f0b8C24",
        "topics": [
          "0x80f15e9dbc60884fdb59fb8ed4fc48a9a689e028f055e893ed45ca5be67c5c85",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006155711b7a66b1473c9efef10150340e69ea48de"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x91dedcd9da5a9671a752a33f5661cb2af04288518e748a7cd65b063b4f7847c4"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 14674960,
        "transactionHash": "0x183c856aef9219f86df9d3146dcf51345d29dc92926ce518b24e8490f24d1b95",
        "address": "0x3d42a8FF39752Bd7f02E86B034f3135C4f0b8C24",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006155711b7a66b1473c9efef10150340e69ea48de"
        ],
        "data": "0x000000000000000000000000000000000000000000000000016345785d8a0000",
        "logIndex": 2,
        "blockHash": "0x91dedcd9da5a9671a752a33f5661cb2af04288518e748a7cd65b063b4f7847c4"
      }
    ],
    "blockNumber": 14674960,
    "cumulativeGasUsed": "5305210",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "c82848277d489ca70774913da15cfad0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"ManagementTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"enum Tokenomics.FeeType\",\"name\":\"name\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"includeInAntiDumping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInPresale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isIncludedInAntiDumping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setIsUnlimitedSenderOrRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setPresaleableEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"transferManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"burn(uint256)\":{\"details\":\"this is really a \\\"soft\\\" burn (total supply is not reduced). RFI holders get two benefits from burning tokens: 1) Tokens in the burn address increase the % of tokens held by holders not    excluded from rewards 2) Tokens in the burn address cannot be sold (which in turn causes deflation) In RFI holders already get % of each transaction so the value of their tokens  increases (in a way). Therefore there is really no need to do a \\\"hard\\\" burn  (reduce the total supply). What matters (in RFI) is to make sure that a large amount of tokens cannot be sold = increasing the intrinsic value of tokens. For this purpose, transfering tokens to a (vanity) burn address is the most appropriate way to \\\"burn\\\".  There is an extra check placed into the `transfer` function to make sure the burn address cannot withdraw the tokens is has (although the chance of someone having/finding the private key is virtually zero).\"},\"decimals()\":{\"details\":\"Returns the token decimals.\"},\"getOwner()\":{\"details\":\"Returns the bep token owner.\"},\"reflectionFromToken(uint256,bool)\":{\"details\":\"Calculates and returns the reflected amount for the given amount with or without  the transfer fees (deductTransferFee true/false)\"},\"symbol()\":{\"details\":\"Returns the token symbol.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"name()\":{\"notice\":\"Functions required by IBEP20 *\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CinemaDraftToken.sol\":\"CinemaDraftToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/CinemaDraftToken.sol\":{\"content\":\"/**\\n * CinemaDraft Token\\n *\\n * author: Solulab Inc. - Umang Ajmera\\n * \\n * This is a rewrite of Safemoon contract in the hope to:\\n *\\n * - make it easier to change the tokenomics\\n * - make it easier to maintain the code and develop it further\\n * - remove redundant code\\n * - fix some of the issues reported in the Safemoon audit\\n *      https://www.certik.org/projects/safemoon\\n *\\n * SPDX-License-Identifier: UNLICENSED\\n */\\n \\npragma solidity 0.8.0;\\n\\ninterface IBEP20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the token decimals.\\n   */\\n  function decimals() external view returns (uint8);\\n\\n  /**\\n   * @dev Returns the token symbol.\\n   */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n  * @dev Returns the token name.\\n  */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the bep token owner.\\n   */\\n  function getOwner() external view returns (address);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address _owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {return msg.sender;}\\n    function _msgData() internal view virtual returns (bytes calldata) {this; return msg.data;}\\n}\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {return a + b;}\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {return a - b;}\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {return a * b;}\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {return a / b;}\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {return a % b;}\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked { require(b <= a, errorMessage); return a - b; }\\n    }\\n}\\n\\nlibrary Address {\\n    function isContract(address account) internal view returns (bool) { uint256 size; assembly { size := extcodesize(account) } return size > 0;}\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");(bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {return functionCall(target, data, \\\"Address: low-level call failed\\\");}\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {return functionCallWithValue(target, data, 0, errorMessage);}\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");}\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) { return returndata; } else {\\n            if (returndata.length > 0) {\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {revert(errorMessage);}\\n        }\\n    }\\n}\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n    address private _previousOwner;\\n    uint256 private _lockTime;\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    function getUnlockTime() public view returns (uint256) {\\n        return _lockTime;\\n    }\\n    function lock(uint256 time) public virtual onlyOwner {\\n        _previousOwner = _owner;\\n        _owner = address(0);\\n        _lockTime = block.timestamp + time;\\n        emit OwnershipTransferred(_owner, address(0));\\n    }\\n    function unlock() public virtual {\\n        require(_previousOwner == msg.sender, \\\"Only the previous owner can unlock onwership\\\");\\n        require(block.timestamp > _lockTime , \\\"The contract is still locked\\\");\\n        emit OwnershipTransferred(_owner, _previousOwner);\\n        _owner = _previousOwner;\\n    }\\n}\\n\\nabstract contract Manageable is Context {\\n\\n    address private _manager;\\n\\n    event ManagementTransferred(address indexed previousManager, address indexed newManager);\\n\\n    constructor(){\\n        address msgSender = _msgSender();\\n        _manager = msgSender;\\n        emit ManagementTransferred(address(0), msgSender);\\n    }\\n\\n    function manager() public view returns(address){ return _manager; }\\n\\n    modifier onlyManager(){\\n        require(_manager == _msgSender(), \\\"Manageable: caller is not the manager\\\");\\n        _;\\n    }\\n\\n    function transferManagement(address newManager) external virtual onlyManager {\\n        emit ManagementTransferred(_manager, newManager);\\n        _manager = newManager;\\n    }\\n\\n}\\n\\n/**\\n * ****************************************\\n *\\n * Tokenomics:\\n * \\n * Token Name   - CinemaDraft Token\\n * Token Symbol - CD3D\\n * Token Supply - 100M (Million)\\n *\\n * Token Distribution:\\n *\\n *  ICO                    20M (20%)\\n *  Dead                   40M (40%)\\n *  Team                   2M  (2%) \\n *  Marketing              10M (10%)\\n *  Liquidity              20M (20%)\\n *  Community Jackpot Fund 8M  (8%)\\n *\\n * ****************************************\\n * \\n * Transaction Fee - 10%\\n *\\n * Transaction Fee Breakdown:\\n *\\n *  Dividends              6.0%\\n *      CinemaDraft            15%\\n *      Holders                75%\\n *      Community Rewards      7%\\n *      Staking Rewards        3%\\n * Burn                    2.4%\\n * Buyback & Burn          1.6%\\n *\\n * ****************************************\\n *\\n * Anti-Dumping Fee     - 15% on token sale\\n * Anti-Whale Mechanism - 0.15% of total token supply\\n * \\n * ****************************************\\n */\\n\\n/**\\n * \\n * If you wish to disable a particular tax/fee just set it to zero (or comment it out/remove it).\\n * \\n * You can add (in theory) as many custom taxes/fees with dedicated wallet addresses if you want. \\n * Nevertheless, I do not recommend using more than a few as the contract has not been tested \\n * for more than the original number of taxes/fees, which is 4 (redistribution, burn, \\n * company and community). Furthermore, exchanges may impose a limit on the total\\n * transaction fee (so that, for example, you cannot claim 100%). Usually this is done by limiting the \\n * max value of slippage, for example, PancakeSwap max slippage is 49.9% and the fees total of more than\\n * 35% will most likely fail there.\\n * \\n * NOTE: You shouldn't really remove the Rfi fee. If you do not wish to use RFI for your token, \\n * you shouldn't be using this contract at all (you're just wasting gas if you do).\\n *\\n */\\nabstract contract Tokenomics {\\n    \\n    using SafeMath for uint256;\\n    \\n    // --------------------- Token Settings ------------------- //\\n\\n    string internal constant NAME = \\\"CinemaDraft Token\\\";\\n    string internal constant SYMBOL = \\\"CD3D\\\";\\n    \\n    uint16 internal constant FEES_DIVISOR = 10**4;\\n    uint8 internal constant DECIMALS = 9;\\n    uint256 internal constant ZEROES = 10**DECIMALS;\\n    \\n    uint256 private constant MAX = ~uint256(0);\\n    uint256 internal constant TOTAL_SUPPLY = 100 * 10**6 * ZEROES; // 100 Million i.e. 100 * 10**6\\n    uint256 internal _reflectedSupply = (MAX - (MAX % TOTAL_SUPPLY));\\n\\n    /**\\n     * @dev Set the maximum transaction amount allowed in a transfer.\\n     * \\n     * The default value is 0.15% of the total supply. \\n     * \\n     * NOTE: set the value to `TOTAL_SUPPLY` to have an unlimited max, i.e.\\n     * `maxTransactionAmount = TOTAL_SUPPLY;`\\n     */\\n    uint256 internal constant maxTransactionAmount = TOTAL_SUPPLY * 15 / FEES_DIVISOR;\\n\\n    // --------------------- Fees Settings ------------------- //\\n    \\n    /**\\n     * @dev The anti-dumping fees will be charged after ICO.\\n     * This fee is differenct from the transaction fees of 1o%. This fee is charged only \\n     * when the token is being sold on any external third-party application. The benefit\\n     * of this fee is shared among all the token holders and this fee also indirectly incentivize \\n     * holders to not sell. Also, after deducting this fee, the remaining amount will be used for\\n     * calculating the 10% fee and the remaining will finally be transferred to the recipient.\\n     *\\n     * For Example: If a user sells 100 tokens on Pancake Swap. The following will happen:\\n     * Anti-dumping     - Deduct 15% of 100 tokens  - remaining quantity 85.0\\n     * Transaction fees - Deduct 10 %  of 85 tokens - remaining quantity 76.5\\n     * This remaining quantity of 76.5 will be sold on the Pancake Swap.\\n     * \\n     * The default value is 15% of the transaction amount.\\n     * \\n     * NOTE: The maximum transaction amount will however be checked first to maintain anti-whale\\n     * mechanism.\\n     * \\n    */\\n    uint256 internal constant antiDumpingFees = 1500;\\n\\n    /**\\n     * @dev To add/edit/remove fees scroll down to the `addFees` function below\\n     */\\n    address internal burnAddress = 0x000000000000000000000000000000000000dEaD;\\n    address internal cinemaDraftWalletAddress = 0x74A892AA1fc6c8C44018cDd16a597fb7151195d8;\\n    address internal communityJackpotAddress = 0x841eE81FF407Ba5504e103D15D8028116391810d;\\n    address internal stakingRewardsWalletAddress = 0xaFA6058126D8f48d49A9A4b127ef7e27C5e1DC43;\\n\\n    enum FeeType { Rfi, Burn, CinemaDraft, CommunityJackpot, StakingRewards }\\n    \\n    struct Fee {\\n        FeeType name;\\n        uint256 value;\\n        address recipient;\\n        uint256 total;\\n    }\\n    Fee[] public fees;\\n    \\n    uint256 private sumOfFees;\\n\\n    constructor() {\\n        _addFees();\\n    }\\n\\n    function _addFee(FeeType name, uint256 value, address recipient) private {\\n        fees.push( Fee(name, value, recipient, 0 ) );\\n        sumOfFees += value;\\n    }\\n\\n    function _addFees() private {\\n\\n        /**\\n         * The RFI recipient is ignored but we need to give a valid address value\\n         *\\n         * CAUTION: If you don't want to use RFI this implementation isn't really for you!\\n         *      There are much more efficient and cleaner token contracts without RFI \\n         *      so you should use one of those\\n         *\\n         * The value of fees is given in part per 10,000 (based on the value of FEES_DIVISOR),\\n         * e.g. for 4% use 400, for 0.42% use 42, etc. \\n         */ \\n        _addFee(FeeType.Rfi, 450, address(this)); \\n\\n        _addFee(FeeType.Burn, 400, burnAddress);\\n        _addFee(FeeType.CinemaDraft, 90, cinemaDraftWalletAddress);\\n        _addFee(FeeType.CommunityJackpot, 42, communityJackpotAddress);\\n        _addFee(FeeType.StakingRewards, 18, stakingRewardsWalletAddress);\\n\\n    }\\n\\n    function _getFeesCount() internal view returns (uint256) {\\n        return fees.length;\\n    }\\n\\n    function _getFeeStruct(uint256 index) private view returns(Fee storage){\\n        require( index >= 0 && index < fees.length, \\\"FeesSettings._getFeeStruct: Fee index out of bounds\\\");\\n        return fees[index];\\n    }\\n    \\n    function _getFee(uint256 index) internal view returns (FeeType, uint256, address, uint256){\\n        Fee memory fee = _getFeeStruct(index);\\n        return ( fee.name, fee.value, fee.recipient, fee.total );\\n    }\\n    \\n    function getFeeTotal() internal view returns (uint256) {\\n        return sumOfFees;\\n    }\\n    \\n    function _addFeeCollectedAmount(uint256 index, uint256 amount) internal {\\n        Fee storage fee = _getFeeStruct(index);\\n        fee.total = fee.total.add(amount);\\n    }\\n\\n    function getCollectedFeeTotal(uint256 index) internal view returns (uint256){\\n        Fee memory fee = _getFeeStruct(index);\\n        return fee.total;\\n    }\\n    \\n}\\n\\n/**\\n * The fee tokenomics start after the token auction. To achive this, a \\\"isInPresale\\\" flag is used.\\n * As soon as the auction ends, the contract manager can set this value to false. This will start \\n * fee deduction as per as per the tokenomics mentioned above.\\n*/\\nabstract contract Presaleable is Manageable {\\n    \\n    bool public isInPresale = false;\\n    \\n    function setPresaleableEnabled(bool value) external onlyManager {\\n        isInPresale = value;\\n    }\\n}\\n\\n/**\\n * This is the modified version of Safemoon contract.\\n * For a modular approach, multiple inheritance is used.\\n *\\n * @dev This contract implements only the reflection logic as used in deflationary tokens. You can \\n * refer to Reflect Finance at 'https://github.com/reflectfinance'. All the other functionalties\\n * as per the business logic of our application have been implemented in the \\\"CinemaDraftToken\\\"\\n * contract. \\n */\\nabstract contract ReflectionToken is IBEP20, Ownable, Presaleable, Tokenomics {\\n\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) internal _reflectedBalances;\\n    mapping (address => uint256) internal _balances;\\n    mapping (address => mapping (address => uint256)) internal _allowances;\\n    \\n    mapping (address => bool) internal _isExcludedFromFee;\\n    mapping (address => bool) internal _isExcludedFromRewards;\\n    address[] private _excluded;\\n    \\n    mapping (address => bool) internal _isIncludedInAntiDumping;\\n\\n    mapping (address => bool) internal _isUnlimitedSenderOrRecipient;\\n    \\n    constructor() {\\n        \\n        _reflectedBalances[owner()] = _reflectedSupply;\\n        \\n        // exclude owner and this contract from fee\\n        _isExcludedFromFee[owner()] = true;\\n        _isExcludedFromFee[address(this)] = true;\\n        \\n        // exclude the owner and this contract from rewards\\n        _exclude(owner());\\n        _exclude(address(this));\\n        \\n        // set owner and staking rewards wallet as unlimited sender/recipient\\n        _isUnlimitedSenderOrRecipient[owner()] = true;\\n\\n        emit Transfer(address(0), owner(), TOTAL_SUPPLY);\\n        \\n    }\\n    \\n    /** Functions required by IBEP20 **/\\n        \\n        function name() external pure override returns (string memory) {\\n            return NAME;\\n        }\\n        \\n        function symbol() external pure override returns (string memory) {\\n            return SYMBOL;\\n        }\\n        \\n        function decimals() external pure override returns (uint8) {\\n            return DECIMALS;\\n        }\\n        \\n        function totalSupply() external pure override returns (uint256) {\\n            return TOTAL_SUPPLY;\\n        }\\n        \\n        function getOwner() external view override returns (address) {\\n            return owner();\\n        }\\n        \\n        function balanceOf(address account) public view override returns (uint256){\\n            if (_isExcludedFromRewards[account]) return _balances[account];\\n            return tokenFromReflection(_reflectedBalances[account]);\\n        }\\n        \\n        function transfer(address recipient, uint256 amount) external override returns (bool){\\n            _transfer(_msgSender(), recipient, amount);\\n            return true;\\n        }\\n        \\n        function allowance(address owner, address spender) external view override returns (uint256){\\n            return _allowances[owner][spender];\\n        }\\n    \\n        function approve(address spender, uint256 amount) external override returns (bool) {\\n            _approve(_msgSender(), spender, amount);\\n            return true;\\n        }\\n        \\n        function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool){\\n            _transfer(sender, recipient, amount);\\n            _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n            return true;\\n        }\\n    /** Functions required by IBEP20 - END **/\\n\\n    /**\\n     * @dev this is really a \\\"soft\\\" burn (total supply is not reduced). RFI holders\\n     * get two benefits from burning tokens:\\n     *\\n     * 1) Tokens in the burn address increase the % of tokens held by holders not\\n     *    excluded from rewards\\n     * 2) Tokens in the burn address cannot be sold (which in turn causes deflation)\\n     *\\n     *\\n     * In RFI holders already get % of each transaction so the value of their tokens \\n     * increases (in a way). Therefore there is really no need to do a \\\"hard\\\" burn \\n     * (reduce the total supply). What matters (in RFI) is to make sure that a large\\n     * amount of tokens cannot be sold = increasing the intrinsic value of tokens.\\n     * For this purpose, transfering tokens to a (vanity) burn address is the\\n     * most appropriate way to \\\"burn\\\". \\n     *\\n     * There is an extra check placed into the `transfer` function to make sure the\\n     * burn address cannot withdraw the tokens is has (although the chance of someone\\n     * having/finding the private key is virtually zero).\\n     */\\n    function burn(uint256 amount) external {\\n\\n        address sender = _msgSender();\\n        require(sender != address(0), \\\"ReflectionToken: burn from the zero address\\\");\\n        require(sender != address(burnAddress), \\\"ReflectionToken: burn from the burn address\\\");\\n\\n        uint256 balance = balanceOf(sender);\\n        require(balance >= amount, \\\"ReflectionToken: burn amount exceeds balance\\\");\\n\\n        uint256 reflectedAmount = amount.mul(_getCurrentRate());\\n\\n        // remove the amount from the sender's balance first\\n        _reflectedBalances[sender] = _reflectedBalances[sender].sub(reflectedAmount);\\n        if (_isExcludedFromRewards[sender])\\n            _balances[sender] = _balances[sender].sub(amount);\\n\\n        _burnTokens( sender, amount, reflectedAmount );\\n    }\\n    \\n    /**\\n     * @dev \\\"Soft\\\" burns the specified amount of tokens by sending them \\n     * to the burn address\\n     */\\n    function _burnTokens(address sender, uint256 tBurn, uint256 rBurn) internal {\\n\\n        /**\\n         * @dev Do not reduce _totalSupply and/or _reflectedSupply. (soft) burning by sending\\n         * tokens to the burn address (which should be excluded from rewards) is sufficient\\n         * in RFI\\n         */ \\n        _reflectedBalances[burnAddress] = _reflectedBalances[burnAddress].add(rBurn);\\n        if (_isExcludedFromRewards[burnAddress])\\n            _balances[burnAddress] = _balances[burnAddress].add(tBurn);\\n\\n        /**\\n         * @dev Emit the event so that the burn address balance is updated (on bscscan)\\n         */\\n        emit Transfer(sender, burnAddress, tBurn);\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n    \\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Calculates and returns the reflected amount for the given amount with or without \\n     * the transfer fees (deductTransferFee true/false)\\n     */\\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) external view returns(uint256) {\\n        require(tAmount <= TOTAL_SUPPLY, \\\"Amount must be less than supply\\\");\\n        if (!deductTransferFee) {\\n            (uint256 rAmount,,,,) = _getValues(tAmount,0);\\n            return rAmount;\\n        } else {\\n            (,uint256 rTransferAmount,,,) = _getValues(tAmount, getFeeTotal());\\n            return rTransferAmount;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates and returns the amount of tokens corresponding to the given reflected amount.\\n     */\\n    function tokenFromReflection(uint256 rAmount) internal view returns(uint256) {\\n        require(rAmount <= _reflectedSupply, \\\"Amount must be less than total reflections\\\");\\n        uint256 currentRate = _getCurrentRate();\\n        return rAmount.div(currentRate);\\n    }\\n    \\n    function excludeFromReward(address account) external onlyOwner {\\n        require(!_isExcludedFromRewards[account], \\\"Account is already excluded from rewards\\\");\\n        _exclude(account);\\n    }\\n    \\n    function _exclude(address account) internal {\\n        if(_reflectedBalances[account] > 0) {\\n            _balances[account] = tokenFromReflection(_reflectedBalances[account]);\\n        }\\n        _isExcludedFromRewards[account] = true;\\n        _excluded.push(account);\\n    }\\n    \\n    function isExcludedFromReward(address account) external view returns (bool) {\\n        return _isExcludedFromRewards[account];\\n    }    \\n\\n    function includeInReward(address account) external onlyOwner {\\n        require(_isExcludedFromRewards[account], \\\"Account is already included in rewards\\\");\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (_excluded[i] == account) {\\n                _excluded[i] = _excluded[_excluded.length - 1];\\n                _balances[account] = 0;\\n                _isExcludedFromRewards[account] = false;\\n                _excluded.pop();\\n                break;\\n            }\\n        }\\n    }\\n    \\n    function setExcludedFromFee(address account, bool value) external onlyOwner {\\n        _isExcludedFromFee[account] = value;\\n    }\\n    \\n    function isExcludedFromFee(address account) public view returns(bool) { \\n        return _isExcludedFromFee[account];\\n    }\\n    \\n    function includeInAntiDumping(address _address, bool value) external onlyOwner {\\n        _isIncludedInAntiDumping[_address] = value;\\n        _exclude(_address);\\n    }\\n    \\n    function isIncludedInAntiDumping(address _address) public view returns (bool) {\\n        return _isIncludedInAntiDumping[_address];\\n    }\\n    \\n    function setIsUnlimitedSenderOrRecipient(address account, bool value) external onlyOwner {\\n        require(isInPresale, \\\"ReflectionToken: Address can be initialized only during the pre-sale.\\\");\\n        _isUnlimitedSenderOrRecipient[account] = value;\\n        _isExcludedFromFee[account];\\n    }\\n    \\n    function isUnlimitedSenderOrRecipient(address account) internal view returns (bool) {\\n        return _isUnlimitedSenderOrRecipient[account];\\n    }\\n    \\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"ReflectionToken: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ReflectionToken: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n    \\n    function _transfer(address sender, address recipient, uint256 amount) private {\\n        require(sender != address(0), \\\"ReflectionToken: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ReflectionToken: transfer to the zero address\\\");\\n        require(sender != address(burnAddress), \\\"ReflectionToken: transfer from the burn address\\\");\\n        require(amount > 0, \\\"ReflectionToken: Transfer amount must be greater than zero\\\");\\n        \\n        // indicates whether or not fee should be deducted from the transfer\\n        bool takeFee = true;\\n        \\n        // holds the fees value as per recipient address, used for anti-dumping mechanism\\n        uint256 sumOfFees = getFeeTotal();\\n\\n        if ( isInPresale ) { takeFee = false; }\\n        else {\\n            /**\\n            * Check the amount is within the max allowed limit as long as a\\n            * unlimited sender/recepient is not involved in the transaction\\n            */\\n            if ( amount > maxTransactionAmount && !isUnlimitedSenderOrRecipient(sender) && !isUnlimitedSenderOrRecipient(recipient) ) {\\n                revert(\\\"ReflectionToken: Transfer amount exceeds the maxTxAmount as per anti-whale protocol\\\");\\n            }\\n        }\\n\\n        // if any account belongs to _isExcludedFromFee account then remove the fee\\n        if(_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]) { takeFee = false; }\\n\\n        // if the transaction is being performed on third-party application, take anti-dumping fee\\n        if(_isIncludedInAntiDumping[recipient]) {\\n            sumOfFees = getFeeTotal().add(antiDumpingFees);\\n        }\\n        _transferTokens(sender, recipient, amount, takeFee, sumOfFees);\\n        \\n    }\\n\\n    function _transferTokens(address sender, address recipient, uint256 amount, bool takeFee, uint256 sumOfFees) private {\\n    \\n        // We don't need to know anything about the individual fees here \\n        // (like Safemoon does with `_getValues`). What is required \\n        // for transfer is the sum of all fees to calculate the % of the total \\n        // transaction amount which should be transferred to the recipient. \\n        //\\n        // The `_takeFees` call will/should take care of the individual fees\\n         \\n        // uint256 sumOfFees = getFeeTotal();\\n        if ( !takeFee ) { sumOfFees = 0; }\\n        \\n        (uint256 rAmount, uint256 rTransferAmount, uint256 tAmount, uint256 tTransferAmount, uint256 currentRate ) = _getValues(amount, sumOfFees);\\n        \\n        /** \\n         * Sender's and Recipient's reflected balances must be always updated regardless of\\n         * whether they are excluded from rewards or not.\\n         */ \\n        _reflectedBalances[sender] = _reflectedBalances[sender].sub(rAmount);\\n        _reflectedBalances[recipient] = _reflectedBalances[recipient].add(rTransferAmount);\\n\\n        /**\\n         * Update the true/nominal balances for excluded accounts\\n         */        \\n        if (_isExcludedFromRewards[sender]) { _balances[sender] = _balances[sender].sub(tAmount); }\\n        if (_isExcludedFromRewards[recipient] ) { _balances[recipient] = _balances[recipient].add(tTransferAmount); }\\n        \\n        _takeFees( amount, currentRate, sumOfFees );\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n    \\n    function _takeFees(uint256 amount, uint256 currentRate, uint256 sumOfFees ) private {\\n        if ( sumOfFees > 0 && !isInPresale ) {\\n            if ( sumOfFees == (getFeeTotal().add(antiDumpingFees)) ) {\\n                _takeTransactionFees(amount.mul(sumOfFees).div(FEES_DIVISOR).mul(10), currentRate);\\n            } else {\\n                _takeTransactionFees(amount, currentRate);   \\n            }\\n        }\\n    }\\n    \\n    function _getValues(uint256 tAmount, uint256 feesSum) internal view returns (uint256, uint256, uint256, uint256, uint256) {\\n        \\n        uint256 tTotalFees = tAmount.mul(feesSum).div(FEES_DIVISOR);\\n        uint256 tTransferAmount = tAmount.sub(tTotalFees);\\n        uint256 currentRate = _getCurrentRate();\\n        uint256 rAmount = tAmount.mul(currentRate);\\n        uint256 rTotalFees = tTotalFees.mul(currentRate);\\n        uint256 rTransferAmount = rAmount.sub(rTotalFees);\\n        \\n        return (rAmount, rTransferAmount, tAmount, tTransferAmount, currentRate);\\n    }\\n    \\n    function _getCurrentRate() internal view returns(uint256) {\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\n        return rSupply.div(tSupply);\\n    }\\n    \\n    function _getCurrentSupply() internal view returns(uint256, uint256) {\\n        uint256 rSupply = _reflectedSupply;\\n        uint256 tSupply = TOTAL_SUPPLY;  \\n\\n        /**\\n         * The code below removes balances of addresses excluded from rewards from\\n         * rSupply and tSupply, which effectively increases the % of transaction fees\\n         * delivered to non-excluded holders\\n         */    \\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (_reflectedBalances[_excluded[i]] > rSupply || _balances[_excluded[i]] > tSupply) return (_reflectedSupply, TOTAL_SUPPLY);\\n            rSupply = rSupply.sub(_reflectedBalances[_excluded[i]]);\\n            tSupply = tSupply.sub(_balances[_excluded[i]]);\\n        }\\n        if (tSupply == 0 || rSupply < _reflectedSupply.div(TOTAL_SUPPLY)) return (_reflectedSupply, TOTAL_SUPPLY);\\n        return (rSupply, tSupply);\\n    }\\n    \\n    /**\\n     * @dev Redistributes the specified amount among the current holders via the reflect.finance\\n     * algorithm, i.e. by updating the _reflectedSupply (_rSupply) which ultimately adjusts the\\n     * current rate used by `tokenFromReflection` and, in turn, the value returns from `balanceOf`. \\n     * This is the bit of clever math which allows rfi to redistribute the fee without \\n     * having to iterate through all holders. \\n     * \\n     * Visit our discord at https://discord.gg/dAmr6eUTpM\\n     */\\n    function _redistribute(uint256 amount, uint256 currentRate, uint256 fee, uint256 index) internal {\\n        uint256 tFee = amount.mul(fee).div(FEES_DIVISOR);\\n        uint256 rFee = tFee.mul(currentRate);\\n\\n        _reflectedSupply = _reflectedSupply.sub(rFee);\\n        _addFeeCollectedAmount(index, tFee);\\n    }\\n    \\n    /**\\n     * @dev Hook that is called before the `Transfer` event is emitted if fees are enabled for the transfer\\n     */\\n    function _takeTransactionFees(uint256 amount, uint256 currentRate) internal virtual;\\n\\n}\\n\\ncontract CinemaDraftToken is ReflectionToken {\\n\\n    using SafeMath for uint256;\\n\\n    function _takeTransactionFees(uint256 amount, uint256 currentRate) internal override {\\n        \\n        if( isInPresale ) { return; }\\n\\n        uint256 feesCount = _getFeesCount();\\n        for (uint256 index = 0; index < feesCount; index++ ) {\\n            (FeeType name, uint256 value, address recipient,) = _getFee(index);\\n            // no need to check value < 0 as the value is uint (i.e. from 0 to 2^256-1)\\n            if ( value == 0 ) continue;\\n\\n            if ( name == FeeType.Rfi ) {\\n                _redistribute( amount, currentRate, value, index );\\n            }\\n            else if ( name == FeeType.Burn ) {\\n                _burn( amount, currentRate, value, index );\\n            }\\n            else if ( name == FeeType.CinemaDraft) {\\n                _takeFee( amount, currentRate, value, recipient, index );\\n            }\\n            else if (name == FeeType.StakingRewards) {\\n                _takeFee( amount, currentRate, value, recipient, index );\\n            }\\n            else { // Fees to CommunityJackpot\\n                _takeFee( amount, currentRate, value, recipient, index );\\n            }\\n        }\\n    }\\n\\n    function _burn(uint256 amount, uint256 currentRate, uint256 fee, uint256 index) private {\\n        uint256 tBurn = amount.mul(fee).div(FEES_DIVISOR);\\n        uint256 rBurn = tBurn.mul(currentRate);\\n\\n        _burnTokens(address(this), tBurn, rBurn);\\n        _addFeeCollectedAmount(index, tBurn);\\n    }\\n\\n    function _takeFee(uint256 amount, uint256 currentRate, uint256 fee, address recipient, uint256 index) private {\\n\\n        uint256 tAmount = amount.mul(fee).div(FEES_DIVISOR);\\n        uint256 rAmount = tAmount.mul(currentRate);\\n\\n        _reflectedBalances[recipient] = _reflectedBalances[recipient].add(rAmount);\\n        if(_isExcludedFromRewards[recipient])\\n            _balances[recipient] = _balances[recipient].add(tAmount);\\n\\n        _addFeeCollectedAmount(index, tAmount);\\n    }\\n    \\n}\",\"keccak256\":\"0xb4678bc11b3a75f736086b1f310966ab70f76304e7ab5c174cfddbc1e8a4d109\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the amount of tokens owned by `account`."
      },
      "burn(uint256)": {
        "details": "this is really a \"soft\" burn (total supply is not reduced). RFI holders get two benefits from burning tokens: 1) Tokens in the burn address increase the % of tokens held by holders not    excluded from rewards 2) Tokens in the burn address cannot be sold (which in turn causes deflation) In RFI holders already get % of each transaction so the value of their tokens  increases (in a way). Therefore there is really no need to do a \"hard\" burn  (reduce the total supply). What matters (in RFI) is to make sure that a large amount of tokens cannot be sold = increasing the intrinsic value of tokens. For this purpose, transfering tokens to a (vanity) burn address is the most appropriate way to \"burn\".  There is an extra check placed into the `transfer` function to make sure the burn address cannot withdraw the tokens is has (although the chance of someone having/finding the private key is virtually zero)."
      },
      "decimals()": {
        "details": "Returns the token decimals."
      },
      "getOwner()": {
        "details": "Returns the bep token owner."
      },
      "reflectionFromToken(uint256,bool)": {
        "details": "Calculates and returns the reflected amount for the given amount with or without  the transfer fees (deductTransferFee true/false)"
      },
      "symbol()": {
        "details": "Returns the token symbol."
      },
      "totalSupply()": {
        "details": "Returns the amount of tokens in existence."
      },
      "transfer(address,uint256)": {
        "details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "name()": {
        "notice": "Functions required by IBEP20 *"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 503,
        "contract": "contracts/CinemaDraftToken.sol:CinemaDraftToken",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 505,
        "contract": "contracts/CinemaDraftToken.sol:CinemaDraftToken",
        "label": "_previousOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 507,
        "contract": "contracts/CinemaDraftToken.sol:CinemaDraftToken",
        "label": "_lockTime",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 678,
        "contract": "contracts/CinemaDraftToken.sol:CinemaDraftToken",
        "label": "_manager",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1037,
        "contract": "contracts/CinemaDraftToken.sol:CinemaDraftToken",
        "label": "isInPresale",
        "offset": 20,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 791,
        "contract": "contracts/CinemaDraftToken.sol:CinemaDraftToken",
        "label": "_reflectedSupply",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 807,
        "contract": "contracts/CinemaDraftToken.sol:CinemaDraftToken",
        "label": "burnAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 810,
        "contract": "contracts/CinemaDraftToken.sol:CinemaDraftToken",
        "label": "cinemaDraftWalletAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 813,
        "contract": "contracts/CinemaDraftToken.sol:CinemaDraftToken",
        "label": "communityJackpotAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 816,
        "contract": "contracts/CinemaDraftToken.sol:CinemaDraftToken",
        "label": "stakingRewardsWalletAddress",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 836,
        "contract": "contracts/CinemaDraftToken.sol:CinemaDraftToken",
        "label": "fees",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_struct(Fee)832_storage)dyn_storage"
      },
      {
        "astId": 838,
        "contract": "contracts/CinemaDraftToken.sol:CinemaDraftToken",
        "label": "sumOfFees",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1069,
        "contract": "contracts/CinemaDraftToken.sol:CinemaDraftToken",
        "label": "_reflectedBalances",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1073,
        "contract": "contracts/CinemaDraftToken.sol:CinemaDraftToken",
        "label": "_balances",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1079,
        "contract": "contracts/CinemaDraftToken.sol:CinemaDraftToken",
        "label": "_allowances",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1083,
        "contract": "contracts/CinemaDraftToken.sol:CinemaDraftToken",
        "label": "_isExcludedFromFee",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1087,
        "contract": "contracts/CinemaDraftToken.sol:CinemaDraftToken",
        "label": "_isExcludedFromRewards",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1090,
        "contract": "contracts/CinemaDraftToken.sol:CinemaDraftToken",
        "label": "_excluded",
        "offset": 0,
        "slot": "16",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1094,
        "contract": "contracts/CinemaDraftToken.sol:CinemaDraftToken",
        "label": "_isIncludedInAntiDumping",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1098,
        "contract": "contracts/CinemaDraftToken.sol:CinemaDraftToken",
        "label": "_isUnlimitedSenderOrRecipient",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Fee)832_storage)dyn_storage": {
        "base": "t_struct(Fee)832_storage",
        "encoding": "dynamic_array",
        "label": "struct Tokenomics.Fee[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(FeeType)822": {
        "encoding": "inplace",
        "label": "enum Tokenomics.FeeType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Fee)832_storage": {
        "encoding": "inplace",
        "label": "struct Tokenomics.Fee",
        "members": [
          {
            "astId": 825,
            "contract": "contracts/CinemaDraftToken.sol:CinemaDraftToken",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(FeeType)822"
          },
          {
            "astId": 827,
            "contract": "contracts/CinemaDraftToken.sol:CinemaDraftToken",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 829,
            "contract": "contracts/CinemaDraftToken.sol:CinemaDraftToken",
            "label": "recipient",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 831,
            "contract": "contracts/CinemaDraftToken.sol:CinemaDraftToken",
            "label": "total",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}